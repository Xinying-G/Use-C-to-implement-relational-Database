#!/usr/bin/python

import sys
import psycopg2

# Schema
#
#         -> T
#        /
# R -> S
#        \
#         -> U
#
# Column naming scheme: t_D
# - t: table name
# - D: description
#     - id: primary key, generated by sequence
#     - x: equality restriction selects x rows
#     - xp: equality restriction selects x% of rows
#     - filler: 100 byte string
#
# R(r_id, r_2, r_10, r_1p, r_10p, r_50p, r_filler, s_id)
#
# S(s_id, s_4, s_20, s_filler, t_id, u_id)
#
# T(t_id, t_5, t_filler)
#
# U(u_id, u_5, u_filler)
#

SCHEMA = [
    'drop table if exists R',
    'drop table if exists S',
    'drop table if exists T',
    'drop table if exists U',
    'create table U(U_id int not null primary key, '
                    'u_5 int, '
                    'u_filler varchar)',
    'create table T(t_id int not null primary key, '
                    't_5 int, '
                    't_filler varchar)',
    'create table S(s_id int not null primary key, '
                   's_4 int, '
                   's_20 int, '
                   's_filler varchar, '
                   't_id int references T, '
                   'u_id int references U)',
    'create table R(r_id int not null primary key, '
                   'r_2 int, '
                   'r_10 int, '
                   'r_1p int, '
                   'r_10p int, '
                   'r_50p int, '
                   'r_filler varchar, '
                   's_id int references S)'
]

INSERT_R = "insert into R values(%s, %s, %s, %s, %s, %s, %s, %s)"
INSERT_S = "insert into S values(%s, %s, %s, %s, %s, %s)"
INSERT_T = "insert into T values(%s, %s, %s)"
INSERT_U = "insert into U values(%s, %s, %s)"
N_R = 2000000
N_S = 200000
N_T = 200000
N_U = 400000
REPORT_INTERVAL = 10000
FILLER = 10 * 'x'
BATCH_SIZE = 100


def populate_table(cursor, table, n, sql, row):
    batch = []
    for id in range(n):
        if id % REPORT_INTERVAL == 0:
            print('%s: %s' % (table, id))
        batch.append(row(id))
        if len(batch) == BATCH_SIZE:
            cursor.executemany(sql, batch)
            batch = []
    if len(batch) > 0:
        cursor.executemany(sql, batch)


def main():
    host, dbname, user, password = sys.argv[1:]
    connection = psycopg2.connect("host = '%s' dbname = '%s' user = '%s' password = '%s'" %
                                  (host, dbname, user, password))
    cursor = connection.cursor()
    for ddl in SCHEMA:
        cursor.execute(ddl)
    populate_table(cursor,
                   'u',
                   N_U,
                   INSERT_U,
                   lambda id: (
                       id,
                       id % (N_U // 5),  # u_5
                       FILLER))
    populate_table(cursor,
                   't',
                   N_T,
                   INSERT_T,
                   lambda id: (
                       id,
                       id % (N_T // 5),  # t_5
                       FILLER))
    populate_table(cursor,
                   's',
                   N_S,
                   INSERT_S,
                   lambda id: (
                       id,
                       id % (N_S // 4),  # s_4
                       id % (N_S // 20),  # s_20
                       FILLER,
                       id % N_T,
                       id % N_U))
    populate_table(cursor,
                   'r',
                   N_R,
                   INSERT_R,
                   lambda id: (
                       id,
                       id % (N_R // 2),  # r_2
                       id % (N_R // 10),  # r_10
                       id % 100,  # r_1p
                       id % 10,  # r_10p
                       id % 2,  # r_50p
                       FILLER,
                       id % N_S))
    connection.commit()


main()
